name: Build Dev

on:
  workflow_dispatch:
  push:
    branches:
      - "dev"

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  COMMIT_ID: "${{ github.sha }}"
  NAME: MacArthurGo
  CGO_ENABLED: 1

jobs:
  Build:
    name: Build binary CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, windows-6.0, darwin-10.14, android ]
        goarch: [ "386", amd64, arm64 ]
        exclude:
          - goos: windows-6.0
            goarch: arm64
          - goos: darwin-10.14
            goarch: "386"
          - goos: android
            goarch: "386"
          - goos: android
            goarch: amd64
    steps:
      - uses: actions/checkout@v3

      - name: Set Environment
        run: |
          mkdir -p bin
          echo "SHASHORT=$(git rev-parse --short "${{ env.COMMIT_ID }}")" >> "$GITHUB_ENV"
          echo "BUILDTIME=$(date +'%Y-%m-%dT%H:%M:%SZ' -u)" >> $GITHUB_ENV

      - name: Set LDFLAGS
        run: |
          echo "LDFLAGS=-w -s -X 'MacArthurGo/base.Version=${SHASHORT}' -X 'MacArthurGo/base.Branch=Beta/dev' -X 'MacArthurGo/base.BuildTime=${{ env.BUILDTIME }}'" >> $GITHUB_ENV

      - name: Setup UPX
        run: |
          cd ..
          wget https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz
          tar xf upx-4.2.1-amd64_linux.tar.xz
          echo "upx=../upx-4.2.1-amd64_linux/upx" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up xgo
        if: ${{ matrix.goos!='android' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        if: ${{ matrix.goos=='android' }}
        id: setup-ndk
        with:
          ndk-version: r26b
          add-to-path: true
          
      - name: Build
        if: ${{ matrix.goos!='android' }}
        run: |
          xgo --targets=${{ matrix.goos }}/${{ matrix.goarch }} -ldflags="${LDFLAGS}" --out bin/${{ env.NAME }} ./

      - name: Build Android
        if: ${{ matrix.goos=='android' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          CC=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
          CC=${CC} go build -ldflags "${LDFLAGS}" -o bin/${{ env.NAME }}-${GOOS}-${GOARCH} ./

      - name: Rename Windows
        if: ${{ matrix.goos=='windows-6.0' }}
        run: |
          mv MacArthurGo-windows-6.0-${{ matrix.goarch }}.exe MacArthurGo-windows-${{ matrix.goarch }}.exe
        working-directory: bin

      - name: Rename Darwin
        if: ${{ matrix.goos=='darwin-10.14' }}
        run: |
          mv MacArthurGo-darwin-10.14-${{ matrix.goarch }} MacArthurGo-darwin-${{ matrix.goarch }}
        working-directory: bin

      - name: Chmod and compress
        run: |
          chmod +x bin/${{ env.NAME }}-*
          if [ ${{ matrix.goos }} != "darwin-10.14" ]; then ${{ env.upx }} --lzma --best bin/${{ env.NAME }}-*; fi

      - name: Upload To Artifact
        if: ${{  success() }}
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.SHASHORT }}
          path: |
            bin/*

  Upload-Prerelease:
    permissions: write-all
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@main
        with:
          path: bin/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: bin

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Prerelease-${{ github.ref_name }}
          deleteOnlyFromDrafts: false

      - name: Set Env
        run: |
          echo "UPLOADTIME=$(date +'%Y-%m-%dT%H:%M:%SZ' -u)" >> $GITHUB_ENV
        shell: bash

      - name: Tag Repo
        uses: richardsimko/update-tag@v1.0.6
        with:
          tag_name: Prerelease-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat > release.txt << 'EOF'
          Release created at UTC ${{ env.UPLOADTIME }}
          Synchronize ${{ github.ref_name }} branch code updates, keeping only the latest version
          EOF

      - run: |
          cat > version.json << 'EOF'
          {"version": "${{ env.COMMIT_ID }}", "upload_time": "${{ env.UPLOADTIME }}"}
          EOF
        working-directory: bin

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag_name: Prerelease-${{ github.ref_name }}
          files: |
            bin/*
            bin/*/*
          prerelease: true
          generate_release_notes: true
          body_path: release.txt